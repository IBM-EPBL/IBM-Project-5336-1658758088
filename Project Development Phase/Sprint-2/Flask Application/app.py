# -*- coding: utf-8 -*-
"""gayu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wSwsext0DZsptQFkRsCvzq9INTDj38i
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import random
import pickle

df = pd.read_csv('/dataset_website.csv')

df.head()

from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

X= df.drop(columns='Result')
X.head()

Y=df['Result']
Y=pd.DataFrame(Y)
Y.head()

train_X,test_X,train_Y,test_Y=train_test_split(X,Y,test_size=0.40,random_state=10)

print("Training set has {} samples.".format(train_X.shape[0]))
print("Testing set has {} samples.".format(test_X.shape[0]))

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()
model_4=rfc.fit(train_X,train_Y)

rfc_predict=model_4.predict(test_X)

print('The accuracy of Random Forest Classifier is: ' , 100.0 * accuracy_score(rfc_predict,test_Y))

print(classification_report(rfc_predict,test_Y))

import pickle
pickle.dump(rfc,open('Phishing_Website.pkl','wb'))

import numpy as np
from flask import Flask, jsonify, render_template
import pickle

#load model
import numpy as np
from flask import Flask
app = Flask('Phishing Website')
model = pickle.load(open('Phishing_Website.pkl','rb'))

#load model
import numpy as np
from flask import Flask
app = Flask('Phishing Website')
model = pickle.load(open('Phishing_Website.pkl','rb'))
#redirects to the page to give the user input URL.
@app.route('/predict1')
def predict1():
  return render_template('final.html')

#fetches the URL given by the URL and passes to inputScript
@app.route('/y_predict',methods=['POST'])
def y_predict2():
    '''
    For rendering results on HTML GUI
    '''
    url=request.form['URL']
    checkprediction=inputScript.main(url)
    prediction= model.predict(checkprediction)
    print(prdiction)
    output=prediction[0]
    if(output==1):
      pred="Your are safe!! This is a Legitimate Website."
    else:
      pred="You are on the wrong site. Be cautious!"
    return render_template('final.html', prediction_text='{}'.format(pred),url=url)
#Takes the input paramters fetched fro the URL by inputScript and returns the predictions
@app.route('/predict_app',methods=['POST'])
def predict_api():
    '''
    For firect API calls trougt request
    '''
    data=request.get_json(force=True) 
    prediction = model.y-predict([np.array(list(data.values()))]) 
    output=prediction[0]
    return jsonify(output)

if 'Phishing website' == '_main_':
  app.config['FLASK_APP']='run:gayu'
  app.config['ENV'] = 'development'
  app.config['debug'] = True
  app.config['TESTING'] = True
  app.run(host='0.0.0.0', debug=True)